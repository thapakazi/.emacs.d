* Highlight Symbol
#+BEGIN_SRC emacs-lisp
    (use-package highlight-symbol
      :ensure t
      :config
      (global-set-key [(control f3)] 'highlight-symbol-at-point)
      (global-set-key [(shift f3)] 'highlight-symbol-next)
      (global-set-key [(shift f2)] 'highlight-symbol-prev)
          (global-set-key (kbd "s-<mouse-5>") 'highlight-symbol-next)
          (global-set-key (kbd "s-<mouse-4>") 'highlight-symbol-prev)

      (global-unset-key (kbd "<C-S-mouse-1>"))
      (global-set-key (kbd "<C-S-mouse-1>")
                      (lambda (event)
                        (interactive "e")
                        (save-excursion
                          (goto-char (posn-point (event-start event)))
                          (highlight-symbol-at-point))))
  )
      ;; :init
      ;; (defun highlight-with-mouse ()
      ;;   (lambda (event)
      ;;     (interactive "e")
      ;;     (save-excursion
      ;;       (goto-char (posn-point (event-start event)))
      ;;       (highlight-symbol-at-point))))
      ;; :bind ("<C-mouse-1>" . highlight-with-mouse))
#+END_SRC
* Recentf
 quick navigate to recent files

 #+begin_src emacs-lisp
(use-package recentf
  :init
  (progn
    (recentf-mode t)
    (setq recentf-max-saved-items 500)
	:config
	(bind-key "C-x ," 'counsel-recentf)
	)
  )
 #+end_src

 #+RESULTS:

* Magit
 I <3 magit.
 A great interface for git projects. It's much more pleasant to use
 than the git interface on the command line. Use an easy keybinding to
 access magit.

 #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c m" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
 #+end_src

 #+RESULTS:

*** Fullscreen magit

 #+BEGIN_QUOTE
 The following code makes magit-status run alone in the frame, and then
 restores the old window configuration when you quit out of magit.

 No more juggling windows after commiting. It's magit bliss.
 #+END_QUOTE
 [[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

 #+begin_src emacs-lisp
 ;;full screen magit-status
 (defadvice magit-status (around magit-fullscreen activate)
   (window-configuration-to-register :magit-fullscreen)
   ad-do-it
   (delete-other-windows))

 (defun magit-quit-session ()
   "Restores the previous window configuration and kills the magit buffer"
   (interactive)
   (kill-buffer)
   (jump-to-register :magit-fullscreen))
 #+end_src

** COMMENT Forge
  TODO, check github access in magit style
  #+begin_src emacs-lisp
  (use-package forge
   :after magit)
  #+end_src

* Hungry Delete
  hungry i am, I would eat all your empty lines. Minor Mode
  #+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode)
  )
  #+END_SRC

* Ace Jump
** Ace Jump Mode

 A quick way to jump around text in buffers.

 [[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]
 #+begin_src emacs-lisp
 (use-package ace-jump-mode
   :ensure t
   :diminish ace-jump-mode
   :commands ace-jump-mode
   :bind ("C-S-s" . ace-jump-mode))
 #+end_src

 #+RESULTS:

** Ace Window

 [[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
 buffer navigation, but applies it to windows. The default keys are
 1-9, but it's faster to access the keys on the home row, so that's
 what I have them set to (with respect to Dvorak, of course).

 #+begin_src emacs-lisp
 (use-package ace-window
   :ensure t
   :config
   (setq aw-keys '(?a ?s ?d ?f ?j ?k ?k ?l))
   (ace-window-display-mode)
   :bind ("C-S-o" . ace-window))
 #+end_src

 #+RESULTS:

* Yasnippet
 #+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (yas-global-mode))
 #+end_src

* Run buffer
  src: http://ergoemacs.org/emacs/elisp_run_current_file.html

  #+BEGIN_SRC emacs-lisp
  (defun xah-run-current-file ()
  "Execute the current file.
For example, if the current buffer is x.py, then it'll call 「python x.py」 in a shell. Output is printed to message buffer.

The file can be Emacs Lisp, PHP, Perl, Python, Ruby, JavaScript, TypeScript, golang, Bash, Ocaml, Visual Basic, TeX, Java, Clojure.
File suffix is used to determine what program to run.

If the file is modified or not saved, save it automatically before run.

URL `http://ergoemacs.org/emacs/elisp_run_current_file.html'
Version 2017-07-31"
  (interactive)
  (let (
        ($suffix-map
         ;; (‹extension› . ‹shell program name›)
         `(
           ("yml" . "ansible-playbook -vvvv")
           ("php" . "php")
           ("pl" . "perl")
           ("py" . "python")
           ("py3" . ,(if (string-equal system-type "windows-nt") "c:/Python32/python.exe" "python3"))
           ("rb" . "ruby")
           ("go" . "go run")
           ("hs" . "runhaskell")
           ("js" . "node") ; node.js
           ("ts" . "tsc --alwaysStrict --lib DOM,ES2015,DOM.Iterable,ScriptHost --target ES5") ; TypeScript
           ("sh" . "bash")
           ("clj" . "java -cp /home/xah/apps/clojure-1.6.0/clojure-1.6.0.jar clojure.main")
           ("rkt" . "racket")
           ("ml" . "ocaml")
           ("vbs" . "cscript")
           ("tex" . "pdflatex")
           ("latex" . "pdflatex")
           ("java" . "javac")
           ;; ("pov" . "/usr/local/bin/povray +R2 +A0.1 +J1.2 +Am2 +Q9 +H480 +W640")
           ))
        $fname
        $fSuffix
        $prog-name
        $cmd-str)
    (when (not (buffer-file-name)) (save-buffer))
    (when (buffer-modified-p) (save-buffer))
    (setq $fname (buffer-file-name))
    (setq $fSuffix (file-name-extension $fname))
    (setq $prog-name (cdr (assoc $fSuffix $suffix-map)))
    (setq $cmd-str (concat $prog-name " \""   $fname "\""))
    (cond
     ((string-equal $fSuffix "el") (load $fname))
     ((string-equal $fSuffix "go")
      (when (fboundp 'gofmt)
        (gofmt)
        (shell-command $cmd-str "*xah-run-current-file output*" )))
     ((string-equal $fSuffix "java")
      (progn
        (shell-command $cmd-str "*xah-run-current-file output*" )
        (shell-command
         (format "java %s" (file-name-sans-extension (file-name-nondirectory $fname))))))
     (t (if $prog-name
            (progn
              (message "Running…")
              (shell-command $cmd-str "*xah-run-current-file output*" ))
          (message "No recognized program file suffix for this file."))))))
   (global-set-key (kbd "<f7>") 'xah-run-current-file)
  #+END_SRC

  #+RESULTS:
  : xah-run-current-file

  
* Emacs Setting
  Tired of rebooting the emacs. Closing and opening as ~emacs --debug-init /home/thapakazi/.emacs.d/config.org -fs~.
  I have a solution
#+BEGIN_SRC emacs-lisp
(defun restart-emacs ()
  (interactive)
   (load-file "~/.emacs.d/init.el"))
(bind-key "s-<f5>" 'restart-emacs)

#+END_SRC

* [[https://github.com/jacktasia/dumb-jump][Dumb Jump]]
  My brother [[https://github.com/neymarsabin][@neymarsabin]] suggested this via telegram. I needed sth similar, lets see the drill.
  #+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
    :ensure t
    :config
    (dumb-jump-mode))

  #+END_SRC

* Mark Ring
  read more on [[http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html][ergoemacs]]
 #+begin_src emacs-lisp
(setq mark-ring-max 6)
(setq global-mark-ring-max 10)

;; (defun xah-pop-local-mark-ring ()
;;   "Move cursor to last mark position of current buffer.
;; Call this repeatedly will cycle all positions in `mark-ring'.
;; URL `http://ergoemacs.org/emacs/emacs_jump_to_previous_position.html'
;; Version 2016-04-04"
;;   (interactive)
;;   (set-mark-command t))


;; (global-set-key (kbd "<f6>") 'pop-global-mark)
;; (global-set-key (kbd "<S-f6>") 'xah-pop-local-mark-ring)
 #+end_src
* Bookmark with [[https://github.com/joodland/bm][bm]]

  Stealing configs from [[https://github.com/rhoit/dot-emacs#414-bookmark][rho]]
  #+BEGIN_SRC emacs-lisp
  (use-package bm
	:ensure t
	:config
	(setq bm-marker 'bm-marker-left)
	(global-set-key (kbd "<left-fringe> S-<mouse-1>") 'bm-toggle-mouse)
	(global-set-key (kbd "S-<mouse-5>") 'bm-next-mouse)
	(global-set-key (kbd "S-<mouse-4>") 'bm-previous-mouse)
	)
  #+END_SRC
* Custom Split Window
  credits: https://stackoverflow.com/a/6465415/2636474
  #+begin_src emacs-lisp
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
  #+end_src
* flyspell
  I think I would need help from flyspell to improve my typo.

  Requirements: Install these two pkg first
  #+begin_src bash
  yay -S aspell aspell-en
  #+end_src

  #+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))
  #+end_src

* COMMENT Activity Monitor

  #+BEGIN_SRC emacs-lisp
  (use-package activity-watch-mode
	:ensure t
	:config
    (global-activity-watch-mode)
	)
  #+END_SRC

* COMMENT Wakatime

 #+BEGIN_SRC emacs-lisp
  (use-package wakatime-mode
	:ensure t
	:config
    (global-wakatime-mode)
    (custom-set-variables '(wakatime-api-key (getenv "WAKATIME_API_KEY")))
	)
  #+END_SRC

* Evil mode

  #+BEGIN_SRC emacs-lisp
  (use-package evil
	:ensure t
	:config
    (require 'evil)
    (evil-mode 1)
    )
  #+END_SRC
** Evil collection
    #+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
    #+end_src

* COMMENT mail with mu4e
  #+begin_src emacs-lisp
  (use-package mu4e
  :ensure nil
  :load-path "/usr/share/emacs/site-lisp/mu4e/"
  ;; :defer 20 ; Wait until 20 seconds after startup
  :config

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")

  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder  "/[Gmail]/Trash")

  (setq mu4e-maildir-shortcuts
      '(("/Inbox"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)
        ("/[Gmail]/Drafts"    . ?d)
        ("/[Gmail]/All Mail"  . ?a))))
  #+end_src

  #+RESULTS:
  : t

* [[https://github.com/rejeep/drag-stuff.el][drag-stuffs]]
move things up and down easily

#+begin_src emacs-lisp
(use-package drag-stuff
 :ensure t
 :config
 (drag-stuff-global-mode t)
 (drag-stuff-define-keys)
)
#+end_src

* COMMENT Open file on split
  ref: https://stackoverflow.com/a/75036430
  #+begin_src emacs-lisp
(defun find-file-other-window-vertically nil
  "Edit a file in another window, split vertically."
  (interactive)
  (let ((split-width-threshold 0)
        (split-height-threshold nil))
    (call-interactively 'find-file-other-window)))

;(global-set-key (kbd "C-x 3") 'find-file-other-window-vertically)
  #+end_src

* htmlz
  src: https://github.com/0xekez/htmlz-mode
  #+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/manual/")
(load "htmlz.el")
  #+end_src

  #+RESULTS:
  : t

* COMMENT Org Tree Slide Mode
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :ensure t
    :custom
    (org-image-actual-width nil))

  (defun efs/presentation-setup ()
    ;; Hide the mode line
    (display-line-numbers-mode 0)
    (beacon-mode 0)

    ;; Display images inline
    (org-display-inline-images) ;; Can also use org-startup-with-inline-images

    ;; Scale the text.  The next line is for basic scaling:
    ;;(setq text-scale-mode-amount 3)
    ;;(text-scale-mode 1))

  ;; This option is more advanced, allows you to scale other faces too
  ;; (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
  ;;                                    (org-verbatim (:height 1.75) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block))))
  )
  (defun efs/presentation-end ()
    ;; Show the mode line again
    (display-line-numbers-mode 1)
    (beacon-mode 1)

    ;; Turn off text scale mode (or use the next line if you didn't use text-scale-mode)
    ;;(text-scale-mode 0))

    ;; If you use face-remapping-alist, this clears the scaling:
    ;;(setq-local face-remapping-alist '((default variable-pitch default))))
  )
  (use-package org-tree-slide
    :hook ((org-tree-slide-play . efs/presentation-setup)
           (org-tree-slide-stop . efs/presentation-end))
    :custom
    (org-tree-slide-slide-in-effect t)
    (org-tree-slide-activate-message "Greetings Everyone !!")
    (org-tree-slide-deactivate-message "We are at the end, Q/A ??")
    (org-tree-slide-header t)
    (org-tree-slide-breadcrumbs " > ")
    (org-image-actual-width nil))
#+end_src

#+RESULTS:
| efs/presentation-end |


* Asdf
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/manual/asdf.el/")
(require 'asdf)
(asdf-enable) ;; This ensures Emacs has the correct paths to asdf shims and bin
#+end_src

* Blog
#+begin_src emacs-lisp
(use-package easy-hugo
:ensure t
  :bind("C-c C-0" . easy-hugo-menu)
  :init
(setq easy-hugo-basedir "~/repos/thapakazi/blog/")
(setq easy-hugo-url "https://thapakazi.com")
(setq easy-hugo-root "~/repos/thapakazi/blog/")
(setq easy-hugo-previewtime "300")
:config
(easy-hugo-enable-menu)
)

#+end_src

#+RESULTS:
: easy-hugo-menu

