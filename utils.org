#+TITLE: Basic emacs utilities 
#+DATE: Sunday, Dec 03 2017
#+DESCRIPTION: my common utility helpers

* Hungry Delete
  hungry i am, I would eat all your empty lines. Minor Mode
  #+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode)
  )
  #+END_SRC
* Testing from Rhoit
* Multiple cursors
  yes, everyones fan of this video: [[http://emacsrocks.com/e13.html][on youtube]]

  #+BEGIN_SRC emacs-lisp
  (use-package multiple-curosrs)

  #+END_SRC

  #+RESULTS:

* Ace Jump
** Ace Jump Mode

 A quick way to jump around text in buffers.

 [[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]
 #+begin_src emacs-lisp
 (use-package ace-jump-mode
   :ensure t
   :diminish ace-jump-mode
   :commands ace-jump-mode
   :bind ("C-S-s" . ace-jump-mode))
 #+end_src

 #+RESULTS:

** Ace Window

 [[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
 buffer navigation, but applies it to windows. The default keys are
 1-9, but it's faster to access the keys on the home row, so that's
 what I have them set to (with respect to Dvorak, of course).

 #+begin_src emacs-lisp
 (use-package ace-window
   :ensure t
   :config
   (setq aw-keys '(?a ?s ?d ?f ?j ?k ?k ?l))
   (ace-window-display-mode)
   :bind ("C-S-o" . ace-window))
 #+end_src

 #+RESULTS:

* [[https://github.com/baron42bba/.emacs.d/blob/master/bba.org#copy-buffer-file-name-to-kill-ringhttps://github.com/baron42bba/.emacs.d/blob/master/bba.org#copy-buffer-file-name-to-kill-ring][copy buffer file name to kill ring]]
  kudos: [[https://github.com/baron42bba][@baron42bba]]
  #+BEGIN_SRC emacs-lisp
    (defun bba-copy-buffer-name ()
      "copy buffer name to kill-ring. if `universal-argument` is called first, copy only filename to kill-ring."
      (interactive)
      (let* ((bba-buffer-name (if current-prefix-arg (file-name-nondirectory (buffer-file-name))
				(buffer-file-name)
				)))
	(kill-new bba-buffer-name)
	(message ( format "stored '%s' in kill-ring" bba-buffer-name))
	))
  #+END_SRC

  #+RESULTS:
  : bba-copy-buffer-name
* Yasnippet 

 Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
 and have also modified them and added my own.

 It takes a few seconds to load and I don't need them immediately when
 Emacs starts up, so we can defer loading yasnippet until there's some
 idle time.

 #+begin_src emacs-lisp
   (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    )

 #+end_src

 #+RESULTS:

* Run buffer
  src: http://ergoemacs.org/emacs/elisp_run_current_file.html
  
  #+BEGIN_SRC emacs-lisp
  (defun xah-run-current-file ()
  "Execute the current file.
For example, if the current buffer is x.py, then it'll call „Äåpython x.py„Äç in a shell. Output is printed to message buffer.

The file can be Emacs Lisp, PHP, Perl, Python, Ruby, JavaScript, TypeScript, golang, Bash, Ocaml, Visual Basic, TeX, Java, Clojure.
File suffix is used to determine what program to run.

If the file is modified or not saved, save it automatically before run.

URL `http://ergoemacs.org/emacs/elisp_run_current_file.html'
Version 2017-07-31"
  (interactive)
  (let (
        ($suffix-map
         ;; (‚Äπextension‚Ä∫ . ‚Äπshell program name‚Ä∫)
         `(
           ("yml" . "ansible-playbook -vvvv")
           ("php" . "php")
           ("pl" . "perl")
           ("py" . "python")
           ("py3" . ,(if (string-equal system-type "windows-nt") "c:/Python32/python.exe" "python3"))
           ("rb" . "ruby")
           ("go" . "go run")
           ("hs" . "runhaskell")
           ("js" . "node") ; node.js
           ("ts" . "tsc --alwaysStrict --lib DOM,ES2015,DOM.Iterable,ScriptHost --target ES5") ; TypeScript
           ("sh" . "bash")
           ("clj" . "java -cp /home/xah/apps/clojure-1.6.0/clojure-1.6.0.jar clojure.main")
           ("rkt" . "racket")
           ("ml" . "ocaml")
           ("vbs" . "cscript")
           ("tex" . "pdflatex")
           ("latex" . "pdflatex")
           ("java" . "javac")
           ;; ("pov" . "/usr/local/bin/povray +R2 +A0.1 +J1.2 +Am2 +Q9 +H480 +W640")
           ))
        $fname
        $fSuffix
        $prog-name
        $cmd-str)
    (when (not (buffer-file-name)) (save-buffer))
    (when (buffer-modified-p) (save-buffer))
    (setq $fname (buffer-file-name))
    (setq $fSuffix (file-name-extension $fname))
    (setq $prog-name (cdr (assoc $fSuffix $suffix-map)))
    (setq $cmd-str (concat $prog-name " \""   $fname "\""))
    (cond
     ((string-equal $fSuffix "el") (load $fname))
     ((string-equal $fSuffix "go")
      (when (fboundp 'gofmt)
        (gofmt)
        (shell-command $cmd-str "*xah-run-current-file output*" )))
     ((string-equal $fSuffix "java")
      (progn
        (shell-command $cmd-str "*xah-run-current-file output*" )
        (shell-command
         (format "java %s" (file-name-sans-extension (file-name-nondirectory $fname))))))
     (t (if $prog-name
            (progn
              (message "Running‚Ä¶")
              (shell-command $cmd-str "*xah-run-current-file output*" ))
          (message "No recognized program file suffix for this file."))))))
   (global-set-key (kbd "<f8>") 'xah-run-current-file)
  #+END_SRC

  #+RESULTS:
  : xah-run-current-file
* fasd
#+BEGIN_SRC emacs-lisp
  ;;;; fasd
  ;; find previous files/dirs quickly (uses `fasd' shell script)
  (use-package fasd
    :bind ("C-h C-f" . fasd-find-file)
    :config
    (setq fasd-completing-read-function 'helm--completing-read-default)
    (global-fasd-mode 1))
#+END_SRC

* [[https://github.com/abo-abo/hydra][COMMENT Hydra]] [[https://www.youtube.com/watch?v=_qZliI1BKzI][youtube]]
  Tie up rellated commands into a family of short bindings wtih a
  common prefix; from [[https://github.com/abo-abo/hydra/blob/master/README.md][Readme.md]] ü§ñ
  
  #+BEGIN_SRC emacs-lisp
  (use-package hydra
  :ensure t
  :config
  (hydra-add-font-lock))
  #+END_SRC

  Some hydra in action. üòè
  #+BEGIN_SRC emacs-lisp
(require 'windmove)

(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))

(defhydra hydra-splitter (global-map "<f9>")
  "splitter"
  ("<left>" hydra-move-splitter-left)
  ("<down>" hydra-move-splitter-down)
  ("<up>" hydra-move-splitter-up)
  ("<right>" hydra-move-splitter-right))
  #+END_SRC

  Yet another useful stuff
#+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (global-map "<f5>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
#+END_SRC
* Reload Emacs config
  Tired of rebooting the emacs. Closing and opening as ~emacs --debug-init /home/ceasors/.emacs.d/config.org -fs~.
  I have a solution
#+BEGIN_SRC emacs-lisp
(defun restart-emacs ()
  (interactive)
   (load-file "~/.emacs.d/init.el"))
(bind-key "s-<f5>" 'restart-emacs)

#+END_SRC

#+RESULTS:
: restart-emacs

