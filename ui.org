#+TITLE: EyeCandy, UI/UX configs
#+AUTHOR: Milan Thapa
#+DESCRIPTION: Lets beautify emacs a bit
#+STARTUP: contents

* Theme
  Out of numerous themes availabe, I find *wombat* best fit most of
  the times.
** Wombat theme
   Pleasing theme for eyes
   #+begin_src emacs-lisp
     (load-theme 'wombat t)
     (set-face-attribute `mode-line nil
                         :box nil)
     (set-face-attribute `mode-line-inactive nil
                         :box nil)

   #+end_src

** Solarized theme

   Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

   #+begin_src emacs-lisp
(use-package solarized-theme
  :ensure t
  :init
  (;; Don't change the font for some headings and titles
   setq solarized-use-variable-pitch nil)
  )
   #+end_src

*** Convenient theme functions

    #+begin_src emacs-lisp
   (defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
                                   (let ((enabled-themes custom-enabled-themes))
                                   (mapc #'disable-theme custom-enabled-themes)
                                   (load-theme theme t)))

    (defun disable-active-themes ()
    "Disables any currently active themes listed in `custom-enabled-themes'."
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

    (bind-key "s-<f12>" 'switch-theme)
    (bind-key "s-<f11>" 'disable-active-themes)
    #+end_src



* Font

  [[http://levien.com/type/myfonts/inconsolata.html][Inconsolata]] is a nice monospaced font.

  Pull it with pacman. 
  #+begin_src sh :tangle no :results drawery
  yes 'y' | sudo pacman -S ttf-inconsolata
  #+end_src

  #+RESULTS:
  :RESULTS:
  resolving dependencies...
  looking for conflicting packages...

  Packages (1) ttf-inconsolata-20151221.480630d-1

  Total Installed Size:  0.18 MiB
  Net Upgrade Size:      0.00 MiB

  checking keyring...
  checking package integrity...
  loading package files...
  checking for file conflicts...
  checking available disk space...
  :: Processing package changes...
  reinstalling ttf-inconsolata...
  Updating font cache... done.
  :END:

  
  And here's how we tell Emacs to use the font we want to use.

  #+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "Inconsolata-18"))
  #+end_src
   
* [[https://github.com/mattfidler/tabbar-ruler.el][Tabbar Ruler]]
#+BEGIN_SRC emacs-lisp
  (use-package tabbar-ruler
    :config
    ;; sane defaults from Readme.org
    (setq tabbar-ruler-global-tabbar t)    ; get tabbar
    )
#+END_SRC
** Some handy keyboard binds
   Everything is copied from [[https://github.com/rhoit/dot-emacs/blob/master/config/tabbar.cfg.el][rhoit dai's config]]

#+BEGIN_SRC emacs-lisp
(use-package tabbar-ruler
  :ensure t
  :bind (
         ("<f7>" . tabbar-mode)
         ("C-<next>" . tabbar-forward)
         ("C-S-<iso-lefttab>" . tabbar-backward)
         ("C-S-<prior>" . tabbar-backward-group)
         ("C-S-<next>" . tabbar-forward-group)
         ("C-<tab>" . tabbar-forward-tab)
         ;; ("C-<prior>" .tabbar-backward)
         )

  :config
  (setq tabbar-buffer-groups-function
        (lambda ()
          (list (cond
                 ((string-equal "*" (substring (buffer-name) 0 1)) "Emacs Buffer")
                 ((eq major-mode 'dired-mode) "Dired")
                 ((eq major-mode 'compilation-mode) "Compilation")
                 (t "User Buffer"))))))
#+END_SRC

* Mode Icons
   Show icons instead of mode names in emacs.
#+BEGIN_SRC emacs-lisp
(use-package mode-icons
  :ensure t
  :config
  (mode-icons-mode)
  )

#+END_SRC

#+RESULTS:
: t
   Everything is copied from [[https://github.com/rhoit/dot-emacs/blob/master/config/tabbar.cfg.el][rhoit dai's config]]

* COMMENT Modeline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :esure t
  :config
  (setq powerline-default-separator 'wave)

  ;; Make a face for the octicons font (must be installed on your system)
  ;; https://octicons.github.com/
  (make-face 'octicons)
  (set-face-attribute 'octicons nil
                      :family "octicons")
  (setq octicon-mark-github "  ")
  (setq octicon-rocket "")

  ;; mode icon stuff
  ;; https://github.com/rhoit/mode-icons/
  ;; (load-file "~/.emacs.d/00testing/mode-icons/mode-icons.el")
  ;; (mode-icons-mode)

  ;; temporary fix
  ;; (set-face-background 'which-func "gray40") ; move to customize face

  (defun powerline-simpler-vc-mode (s)
    (if s
        (replace-regexp-in-string "Git[:-]" "" s)
      s))

  (setq which-func-format
        `(" "
          (:propertize which-func-current local-map
                       (keymap
                        (mode-line keymap
                                   (mouse-3 . end-of-defun)
                                   (mouse-2 . narrow-to-defun)
                                   (mouse-1 . beginning-of-defun)))
                       face which-func
                       mouse-face mode-line-highlight
                       help-echo "mouse-1: go to beginning\n\
mouse-2: toggle rest visibility\n\
mouse-3: go to end")
          " "))

  ;; (defun powerline-rho-theme ()
  ;;   "A powerline theme that removes many minor-modes that don't
  ;; serve much purpose on the mode-line."
  ;;   (interactive)
  ;;   (setq-default
  ;;    mode-line-format
  ;;    '("%e"
  ;;      (:eval
  ;;       (let* ((active (powerline-selected-window-active))
  ;;              (mode-line (if active 'mode-line 'mode-line-inactive))
  ;;              (face1 (if active 'powerline-active1 'powerline-inactive1))
  ;;              (face2 (if active 'powerline-active2 'powerline-inactive2))
  ;;              (separator-left (intern (format "powerline-%s-%s"
  ;;                                              (powerline-current-separator)
  ;;                                              (car powerline-default-separator-dir))))
  ;;              (separator-right (intern (format "powerline-%s-%s"
  ;;                                               (powerline-current-separator)
  ;;                                               (cdr powerline-default-separator-dir))))
  ;;              (lhs (list (powerline-raw "%*" nil 'l)
  ;;                         (when powerline-display-mule-info
  ;;                           (powerline-raw mode-line-mule-info nil 'l))
  ;;                         (powerline-raw " ")
  ;;                         (funcall separator-left nil face2)
  ;;                         (when (and (boundp 'erc-track-minor-mode) erc-track-minor-mode)
  ;;                           (powerline-raw erc-modified-channels-object face1 'l))
  ;;                         (powerline-major-mode face2 'l)
  ;;                         (powerline-raw " " face2)
  ;;                         (funcall separator-right face2 face1)
  ;;                         (powerline-process face1)
  ;;                         (powerline-minor-modes face1 'l)
  ;;                         (powerline-narrow face1 'l)
  ;;                         (powerline-raw " " face1)
  ;;                         ;;            (powerline-zigzag-left face1 nil)
  ;;                         ;;            (powerline-raw " " nil)
  ;;                         ))
  ;;              (center (list
  ;;                       (when (and (boundp 'which-func-mode) which-func-mode)
  ;;                         (powerline-arrow-left face1 face2))
  ;;                       (when (and (boundp 'which-func-mode) which-func-mode)
  ;;                         (powerline-raw which-func-format face2 'l))
  ;;                       (when (and (boundp 'which-func-mode) which-func-mode)
  ;;                         (powerline-raw " " face2))
  ;;                       (when (and (boundp 'which-func-mode) which-func-mode)
  ;;                         (powerline-zigzag-right face2 nil))
  ;;                       ))
  ;;              (rhs (list (powerline-raw global-mode-string nil 'r)
  ;;                         (when (vc-backend buffer-file-name)
  ;;                           (funcall separator-left nil face2))
  ;;                         (when (vc-backend buffer-file-name)
  ;;                           (powerline-raw octicon-mark-github face2))
  ;;                         (powerline-simpler-vc-mode (powerline-vc face2 'r))
  ;;                         (when (vc-backend buffer-file-name)
  ;;                           (funcall separator-right face2 nil))
  ;;                         (powerline-raw " " nil)
  ;;                         (powerline-zigzag-left nil face1)
  ;;                         (powerline-raw "%3c," face1 'r)
  ;;                         (powerline-raw "%p" face1 'r)
  ;;                         (powerline-zigzag-right face1 nil)
  ;;                         (powerline-raw "  " nil)
  ;;                         )))
  ;;         (concat (powerline-render lhs)
  ;;                 (powerline-render center)
  ;;                 (powerline-fill nil (powerline-width rhs))
  ;;                 (powerline-render rhs))
  ;;         )))))

  ;; (defvar mode-line-cleaner-alist
  ;;   `((auto-complete-mode . "")
  ;;     ;; (yas-minor-mode . (get-mode-icon "YASnippet"))
  ;;     ;; (yas-minor-mode . #("YASnippet" 0 9 (display (image :type xpm :file (mode-icons-get-icon-file "yas.xpm") :ascent center))))
  ;;     ;; (yas-minor-mode . #(" YASnippet" 0 9 (display (image :type xpm :file "/home/rho/.emacs.d/00testing/mode-icons/icons/yas.xpm" :ascent center))))
  ;;     ;; (auto-dim-other-buffers-mode . #("auto-dim-other-buffers" 0 22 (display (image :type xpm :file "~/.emacs.d/00testing/mode-icons/icons/dim.xpm" :ascent center))))
  ;;     (yas-minor-mode . #( " yas" 0 4 (display (image :type xpm :file "~/.emacs.d/00testing/mode-icons/icons/yas.xpm" :ascent center))))
  ;;     (hs-minor-mode . #(" hs" 0 3 (display (image :type xpm :file "/home/rho/.emacs.d/00testing/mode-icons/icons/hs.xpm" :ascent center))))
  ;;     (outline-minor-mode . #(" Outline" 0 8 (display (image :type xpm :file "/home/rho/.emacs.d/00testing/mode-icons/icons/org.xpm" :ascent center))))
  ;;     (auto-dim-other-buffers-mode . "")
  ;;     (highline-mode . "")
  ;;     (highlight-indentation-mode . "")
  ;;     (highlight-indentation-current-column-mode . "")
  ;;     (anzu-mode . "")
  ;;     (markdown-mode . " ")
  ;;     (smooth-scroll-mode . "")
  ;;     (undo-tree-mode . ""))
  ;;   "Alist for `clean-mode-line'.
  ;; When you add a new element to the alist, keep in mind that you
  ;; must pass the correct minor/major mode symbol and a string you
  ;; want to use in the modeline *in lieu of* the original.")

  (defun clean-mode-line ()
    (interactive)
    (loop for cleaner in mode-line-cleaner-alist
          do (let* ((mode (car cleaner))
                    (mode-str (cdr cleaner))
                    (old-mode-str (cdr (assq mode minor-mode-alist))))
               (when old-mode-str
                 (setcar old-mode-str mode-str))
               ;; major mode
               (when (eq mode major-mode)
                 (setq mode-name mode-str)))))


  ;; modeline from spacmacs
  ;; (add-to-list 'load-path  "~/.emacs.d/00testing/spaceline/")
  ;; (require 'spaceline-config)
  ;; (spaceline-spacemacs-theme)

  ;; (powerline-rho-theme)
  (add-hook 'after-change-major-mode-hook 'clean-mode-line)
  )
#+END_SRC

#+RESULTS:


* [[https://github.com/dunn/company-emoji][📦 Emoji]] ruling the world
  This is fun 👨
  Really 😍ing with this mode 😂

  *Dependencies*: [[https://zhm.github.io/symbola/][Symbola]] and adjust the config as below.
  #+BEGIN_SRC bash :results value verbatim
   yes 'y' | sudo pacman -S ttf-symbola 
  #+END_SRC

  #+RESULTS:
  #+begin_example
  resolving dependencies...
  looking for conflicting packages...

  Packages (1) ttf-symbola-8.00-1

  Total Installed Size:  2.09 MiB
  Net Upgrade Size:      0.00 MiB

  checking keyring...
  checking package integrity...
  loading package files...
  checking for file conflicts...
  checking available disk space...
  :: Processing package changes...
  reinstalling ttf-symbola...
#+end_example

#+BEGIN_SRC emacs-lisp
(use-package company-emoji              ; Emojis completion like Github/Slack
  :ensure t
  :defer t
  :init (with-eval-after-load 'company
          (add-to-list 'company-backends 'company-emoji))
  :config
  (defun --set-emoji-font (frame)
    "Adjust the font settings of FRAME so Emacs can display emoji properly."
    (if (eq system-type 'darwin)
        ;; For NS/Cocoa
        (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
      ;; For Linux
      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

  ;; For when Emacs is started in GUI mode:
  (--set-emoji-font nil)
  ;; Hook for when a frame is created with emacsclient
  ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
  (add-hook 'after-make-frame-functions '--set-emoji-font))
#+END_SRC
