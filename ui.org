#+TITLE: EyeCandy, UI/UX configs
#+AUTHOR: Milan Thapa
#+DESCRIPTION: Lets beautify emacs a bit
#+STARTUP: contents

* Theme
  Out of numerous themes availabe, I find *wombat* best fit most of
  the times.
** COMMENT Wombat theme
   Pleasing theme for eyes
   #+begin_src emacs-lisp
     (load-theme 'wombat t)
     (set-face-attribute `mode-line nil
                         :box nil)
     (set-face-attribute `mode-line-inactive nil
                         :box nil)

   #+end_src
** COMMENT doom theme

   Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

   #+begin_src emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
  
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
             doom-themes-enable-italic t) ; if nil, italics is universally disabled

       ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
       ;; may have their own settings.
       (load-theme 'dichromacy t) ;; lol this is unfair :P

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)

       ;; Enable custom neotree theme
       ;;(doom-themes-neotree-config)  ; all-the-icons fonts must be installed!
       )
   #+end_src
** SpaceEmacs theme ;)

   Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

   #+begin_src emacs-lisp
(use-package spacemacs-theme
  :ensure t
  :no-require t
  :config
  (load-theme 'spacemacs-dark t)
  )
   #+end_src

*** Convenient theme functions

    #+begin_src emacs-lisp
   (defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
                                   (let ((enabled-themes custom-enabled-themes))
                                   (mapc #'disable-theme custom-enabled-themes)
                                   (load-theme theme t)))

    (defun disable-active-themes ()
    "Disables any currently active themes listed in `custom-enabled-themes'."
    (interactive)
    (mapc #'disable-theme custom-enabled-themes))

    (bind-key "s-<f12>" 'switch-theme)
    (bind-key "s-<f11>" 'disable-active-themes)
    #+end_src
** COMMENT Jazz Theme for nights
   #+begin_src emacs-lisp
(use-package jazz-theme
  :ensure t
  :config
  ;; (load-theme 'spacemacs-light t)
  )
   #+end_src

   #+RESULTS:
** COMMENT github themes
   #+begin_src emacs-lisp
(use-package github-theme
  :ensure t
  :config
  ;; (load-theme 'github t)
  )
   #+end_src

   #+RESULTS:

* Time based theme switch
  Theme switch based on time, written with assist from ChatGPT 4.0
  #+begin_src emacs-lisp
(defun set-theme-based-on-time ()
  "Set the Emacs theme based on the current time."
  (let ((hour (string-to-number (format-time-string "%H"))))
    (if (and (>= hour 7) (< hour 18))
        (load-theme 'spacemacs-light t)  ; Use your preferred light theme
      (load-theme 'spacemacs-dark t)))) ; Use your preferred dark theme

;; Run the function once when Emacs starts
(set-theme-based-on-time)

;; Optionally, re-check every hour
(run-at-time "20 minutes" 3600 'set-theme-based-on-time)
  #+end_src

* Font

  *Change:* Switching to [[https://adobe-fonts.github.io/source-code-pro/][SourceCodePro]] font, Pull it from aur.
  #+begin_src sh :tangle no :results drawer
  yes 'y' | sudo yaourt -S ttf-jetbrains-mono
  #+end_src

  #+RESULTS:
  :results:
  resolving dependencies...
  looking for conflicting packages...

  Packages (1) ttf-jetbrains-mono-1.0.6-2

  Total Installed Size:  2.40 MiB
  Net Upgrade Size:      0.00 MiB

  checking keyring...
  checking package integrity...
  loading package files...
  checking for file conflicts...
  checking available disk space...
  :: Processing package changes...
  reinstalling ttf-jetbrains-mono...
  :: Running post-transaction hooks...
  (1/4) Arming ConditionNeedsUpdate...
  (2/4) Updating fontconfig cache...
  (3/4) Updating 32-bit fontconfig cache...
  (4/4) Updating X fontdir indices...
  No database errors have been found!
  :end:

  
  And here's how we tell Emacs to use the font we want to use.

  #+begin_src emacs-lisp
(add-to-list 'default-frame-alist
             '(font . "JetBrains Mono 20")
)
(set-face-attribute 'default nil
                    :family "JetBrains Mono"
                    :height  130 
                    :weight 'medium
                    :width 'normal)
  #+end_src

  #+RESULTS:
   
* Mode Icons
   Show icons instead of mode names in emacs.
#+BEGIN_SRC emacs-lisp
(use-package mode-icons
  :ensure t
  :config
  (mode-icons-mode)
  )

#+END_SRC

#+RESULTS:
: t
   Everything is copied from [[https://github.com/rhoit/dot-emacs/blob/master/config/tabbar.cfg.el][rhoit dai's config]]
* [[https://github.com/dunn/company-emoji][üì¶ Emoji]] ruling the world
  This is fun üë®
  Really üòçing with this mode üòÇ


  *Dependencies*: [[https://zhm.github.io/symbola/][Symbola]] and adjust the config as below.
  #+BEGIN_SRC bash :results value verbatim
   yes 'y' | sudo pacman -S ttf-symbola 
  #+END_SRC

  #+RESULTS:
  #+begin_example
  resolving dependencies...
  looking for conflicting packages...

  Packages (1) ttf-symbola-8.00-1

  Total Installed Size:  2.09 MiB
  Net Upgrade Size:      0.00 MiB

  checking keyring...
  checking package integrity...
  loading package files...
  checking for file conflicts...
  checking available disk space...
  :: Processing package changes...
  reinstalling ttf-symbola...
#+end_example

#+BEGIN_SRC emacs-lisp
(use-package company-emoji              ; Emojis completion like Github/Slack
  :ensure t
  :defer t
  :init (with-eval-after-load 'company
          (add-to-list 'company-backends 'company-emoji))
  :config
  (defun --set-emoji-font (frame)
    "Adjust the font settings of FRAME so Emacs can display emoji properly."
    (if (eq system-type 'darwin)
        ;; For NS/Cocoa
        (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji") frame 'prepend)
      ;; For Linux
      (set-fontset-font t 'symbol (font-spec :family "Symbola") frame 'prepend)))

  ;; For when Emacs is started in GUI mode:
  (--set-emoji-font nil)
  ;; Hook for when a frame is created with emacsclient
  ;; see https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html
  (add-hook 'after-make-frame-functions '--set-emoji-font))
#+END_SRC
* All the fonts
#+BEGIN_SRC emacs-lisp

(use-package all-the-icons
  :ensure t
)
#+END_SRC
* Neotree
#+BEGIN_QUOTE
   Nerd Tree like vim
     Hard to navigate tree, lets steal goodness from vim
#+END_QUOTE
#+BEGIN_SRC emacs-lisp

(use-package neotree
  :ensure t
  :bind (("<f9>" . neotree-toggle))
  :config (setq neo-window-width 20
                neo-window-fixed-size nil
                neo-create-file-auto-open t
                neo-banner-message nil
                neo-show-updir-line nil
                neo-mode-line-type 'neotree
                neo-smart-open t
                neo-dont-be-alone t
                neo-persist-show nil
                neo-show-hidden-files t
                neo-auto-indent-point t
		        ;;projectile-switch-project-action 'neotree-projectile-action
		        neo-theme (if (display-graphic-p) 'icons 'arrow))
  )
#+END_SRC

#+RESULTS:
: neotree-toggle
* kill ‚ò† ring üíç
  Popup kill ring. Lets try this
  desc: browse your emacs kill ring in an autocomplete style popup menu
  #+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
  :ensure t
  :bind ("M-y" . popup-kill-ring)
  ;; :config (setq popup-kill-ring-interactive-insert t)
)
  #+END_SRC
* beacon mode
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1)
      )
  #+END_SRC

  #+RESULTS:
  : t
* Global hl line mode
  #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  ;; (set-face-background hl-line-face "#222133" )
  #+END_SRC

  #+RESULTS:
  : t
* Expand regions
  #+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC

  #+RESULTS:
  : t
* Toggle Truncate line
  #+begin_src emacs-lisp
  (toggle-truncate-lines)
  #+end_src

  #+RESULTS:
  : Truncate long lines enabled
* COMMENT My Own
  #+begin_src elisp
  (require 'hl-line)
  (set-face-background hl-line-face "#222133" )
  #+end_src
* Electric Pair Mode
  #+begin_src emacs-lisp
  (electric-pair-mode 1)
  #+end_src

  #+RESULTS:
  : t
* modeline | [[https://github.com/seagle0128/doom-modeline][doom-modeline]]
  #+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config (custom-set-faces
           ;; '(mode-line ((t (:family "Noto Sans" :height 0.7))))
           ;; '(mode-line-inactive ((t (:family "Noto Sans" :height 0.7))))
           )
)
  #+end_src

  #+RESULTS:
  : t

* zoom window | [[https://github.com/emacsorphanage/zoom-window][zoom-window]]
  miss the zoom like feature on tmux ;)
  #+begin_src emacs-lisp
(use-package zoom-window
  :ensure t
  :bind (("C-z" . zoom-window-zoom)
         ("C-S-z" . zoom-window-next))
  :config(custom-set-variables
          '(zoom-window-mode-line-color "WHITESMOKE"))
  )
  #+end_src

*  transparent bg
  #+begin_src emacs-lisp
;; Function to toggle transparency
(defun kazi/toggle-transparency ()
  "Toggle transparency of the current Emacs frame."
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (if (or (not alpha) (eql (cdr alpha) 90))  ;; Check for the default transparency or no transparency set
        (set-frame-parameter nil 'alpha '(100 . 100))  ;; Set to fully opaque
      (set-frame-parameter nil 'alpha '(90 . 90)))))   ;; Set to default transparency

;; Set transparency for all new frames
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))

;;Key bindins
(global-set-key (kbd "<f6>") 'kazi/toggle-transparency)
 #+end_src
 

* visual fill column to make it prettier
#+begin_src emacs-lisp
(use-package visual-fill-column
  :ensure t
  :config
  ;; Configure fill width
  (setq visual-fill-column-width 110)
  (setq visual-fill-column-center-text t))
#+end_src

** visual line customization
#+begin_src emacs-lisp
(defun my-set-visual-fill-column-width (width)
  "Set the value of visual-fill-column-width."
  (interactive "nEnter new value for visual-fill-column-width: ")
  (setq visual-fill-column-width width)
  (visual-fill-column-mode 0)
  (visual-fill-column-mode 1)
  (message "visual-fill-column-width set to %d" visual-fill-column-width))

(defun my-increase-visual-fill-column-width (inc)
  "Increase visual-fill-column-width"
  (interactive "p")
  (let* ((current-value visual-fill-column-width)
	 (new-value (+ current-value inc)))
    (if (< new-value 5) (setq visual-fill-column-width 5)
      (setq visual-fill-column-width new-value)))
  (visual-fill-column-mode 0)
  (visual-fill-column-mode 1)
  )

(defun my-adjust-visual-fill-column-width (inc)
  (interactive "p")
  (when (not (boundp 'visual-fill-column-width)) (setq visual-fill-column-width 100))
  (let ((ev last-command-event)
	(echo-keystrokes nil))
    (let* ((base (event-basic-type ev))
	   (step
	    (pcase base
	      ((or ?+ ?=) inc)
	      (?- (- inc))
	      (_ inc))))
      (my-increase-visual-fill-column-width step))
    (message "visual-fill-column-width is %d, adjust with + or -" visual-fill-column-width)
    
      (set-transient-map
       (let ((map (make-sparse-keymap)))
	 (dolist (mods '(() (control)))
	   (dolist (key '(?- ?+ ?=))
	     (define-key map (vector (append mods (list key)))
	       `(lambda () (interactive) (my-adjust-visual-fill-column-width ,inc)))))
	 map))))

(global-set-key (kbd "C-c v w") 'my-set-visual-fill-column-width)
(global-set-key (kbd "C-c v +") 'my-adjust-visual-fill-column-width)
(global-set-key (kbd "C-c v =") 'my-adjust-visual-fill-column-width)
(global-set-key (kbd "C-c v -") 'my-adjust-visual-fill-column-width)
#+end_src

* writeroom mode
#+begin_src emacs-lisp
(use-package writeroom-mode
  :ensure t
  )
#+end_src
