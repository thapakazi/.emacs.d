#+TITLE: Emacs Configuration, with org txt: totally awesome ;)
#+AUTHOR: Milan Thapa
#+DESCRIPTION: I customised the for puerly the arch way.
#+STARTUP: content

This configuration uses the [[https://github.com/jwiegley/use-package][use-package]] package from John Wiegley, which is a fantastic way to manage package configurations.

Sorry Mai, I have scrambled your configs for sake of mine :D
Since my days with breaking emacs continued since last year 2013, I tried so many options: *g:rhoit* *spacemacs*... long list, but still not satifsfied.. until this awesome youtube url happened. Then everythings changed

Now the changes below are upon [[https://github.com/danielmai/.emacs.d.git][Daniels's fork]]. He seems to be happy mac user :P. So I am customising the emacs the arch way for all emacso archians out there. PS: Maybe I would get sometime/someone do it for others too.

[[https://youtu.be/WZzcEJQ8Hnw?t=48][Enough talk let do it]]


* Installing Emacs

  If you are crazy about the latest-greatest release :like me, please collect it from aur/yaourt.
  #+BEGIN_SRC sh :results drawer
emacs --version
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  GNU Emacs 25.0.50.1
  Copyright (C) 2015 Free Software Foundation, Inc.
  GNU Emacs comes with ABSOLUTELY NO WARRANTY.
  You may redistribute copies of GNU Emacs
  under the terms of the GNU General Public License.
  For more information about these matters, see the file named COPYING.
  :END:

  #+begin_src sh
  echo "I prefer emacs installation from git :D, & I ain't mac user"
  #+end_src

* Personal Information
  #+begin_src emacs-lisp
(setq user-full-name "Milan Thapa"
      user-mail-address "oemilan@gmail.com")
  #+end_src

* Customize settings

 Set up the customize file to its own separate file, instead of saving
 customize settings in [[file:init.el][init.el]].

 #+begin_src emacs-lisp
 (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
 (load custom-file)
 #+end_src


 
* Sane defaults

  Let's start with some sane defaults, shall we?

  Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].
  #+begin_src emacs-lisp
    ;; These functions are useful. Activate them.
    (put 'downcase-region 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'narrow-to-region 'disabled nil)
    (put 'dired-find-alternate-file 'disabled nil)

    ;; Answering just 'y' or 'n' will do
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; Keep all backup and auto-save files in one directory
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

    ;; UTF-8 please
    (setq locale-coding-system 'utf-8) ; pretty
    (set-terminal-coding-system 'utf-8) ; pretty
    (set-keyboard-coding-system 'utf-8) ; pretty
    (set-selection-coding-system 'utf-8) ; please
    (prefer-coding-system 'utf-8) ; with sugar on top
    (setq-default indent-tabs-mode nil)

    ;; Turn off the blinking cursor
    (blink-cursor-mode -1)

     (setq-default indent-tabs-mode nil)
     (setq-default indicate-empty-lines t)

     ;; Don't count two spaces after a period as the end of a sentence.
     ;; Just one space is needed.
     (setq sentence-end-double-space nil)

     ;; delete the region when typing, just like as we expect nowadays.
     (delete-selection-mode t)

     (show-paren-mode t)

     (column-number-mode t)

     (global-visual-line-mode)
     (diminish 'visual-line-mode)

     (setq uniquify-buffer-name-style 'forward)
     ;; -i gets alias definitions from .bash_profile
     (setq shell-command-switch "-ic")

     ;; Don't beep at me
     (setq visible-bell t)
 #+end_src

 The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
 [[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
 at point as the default value for occur.

 #+begin_src emacs-lisp
 (defun occur-dwim ()
   "Call `occur' with a sane default."
   (interactive)
   (push (if (region-active-p)
             (buffer-substring-no-properties
             (region-beginning)
              (region-end))
           (thing-at-point 'symbol))
         regexp-history)
   (call-interactively 'occur))

 (bind-key "M-s o" 'occur-dwim)
 #+end_src

* List buffers

 ibuffer is the improved version of list-buffers.

 #+begin_src emacs-lisp
 ;; make ibuffer the default buffer lister.
 (defalias 'list-buffers 'ibuffer)
 #+end_src

 source: http://ergoemacs.org/emacs/emacs_buffer_management.html

 #+begin_src emacs-lisp
 (add-hook 'dired-mode-hook 'auto-revert-mode)

 ;; Also auto refresh dired, but be quiet about it
 (setq global-auto-revert-non-file-buffers t)
 (setq auto-revert-verbose nil)
 #+end_src

 source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

* Recentf

 #+begin_src emacs-lisp
(use-package recentf
  :commands ido-recentf-open
  :init
  (progn
    (recentf-mode t)
    (setq recentf-max-saved-items 200)

    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
          (message "Opening file...")
        (message "Aborting"))))
  :config
    (bind-key "C-x ," 'ido-recentf-open))
 #+end_src

 
* Tramp

 #+begin_src emacs-lisp :tangle no
 (use-package tramp)
 #+end_src

* Shell

 #+begin_src emacs-lisp
 (bind-key "C-x m" 'shell)
 (bind-key "C-x M" 'ansi-term)
 #+end_src

* Window

 Convenient keybindings to resize windows.

 #+begin_src emacs-lisp
 (bind-key "s-C-<left>"  'shrink-window-horizontally)
 (bind-key "s-C-<right>" 'enlarge-window-horizontally)
 (bind-key "s-C-<down>"  'shrink-window)
 (bind-key "s-C-<up>"    'enlarge-window)
 #+end_src

 Whenever I split windows, I usually do so and also switch to the other
 window as well, so might as well rebind the splitting key bindings to
 do just that to reduce the repetition.

 #+begin_src emacs-lisp
 (defun vsplit-other-window ()
   "Splits the window vertically and switches to that window."
   (interactive)
   (split-window-vertically)
   (other-window 1 nil))
 (defun hsplit-other-window ()
   "Splits the window horizontally and switches to that window."
   (interactive)
   (split-window-horizontally)
   (other-window 1 nil))

 (bind-key "C-x 2" 'vsplit-other-window)
 (bind-key "C-x 3" 'hsplit-other-window)
 #+end_src

** Winner mode

 Winner mode allows you to undo/redo changes to window changes in Emacs
 and allows you.

 #+begin_src emacs-lisp
 (winner-mode t)
 #+end_src

** Transpose frame

 #+begin_src emacs-lisp
 (use-package transpose-frame
   :ensure t
   :bind ("s-M-t" . transpose-frame))
 #+end_src

* Ido

 #+begin_src emacs-lisp
 (use-package ido
   :init
   (progn
     (setq ido-enable-flex-matching t)
     (setq ido-everywhere t)
     (ido-mode t)
     ;; (use-package ido-ubiquitous
     ;;   :ensure t
     ;;   :init (ido-ubiquitous-mode))
     (use-package ido-vertical-mode
       :ensure t
       :init (ido-vertical-mode 1)
       (setq ido-vertical-define-keys 'C-n-and-C-p-only))))
       #+end_src
       
* Whitespace mode

 #+begin_src emacs-lisp
 (use-package whitespace
   :bind ("s-<f10>" . whitespace-mode))
 #+end_src

* Locate

 Using OS X Spotlight within Emacs by modifying the ~locate~ function.

 I usually use [[*Helm][~helm-locate~]], which does live updates the spotlight
 search list as you type a query.

 #+begin_src emacs-lisp
 ;; mdfind is the command line interface to Spotlight
 (setq locate-command "mdfind")
 #+end_src

* Emacs Setting
  Tired of rebooting the emacs. Closing and opening as ~emacs --debug-init /home/ceasors/.emacs.d/config.org -fs~.
  I have a solution
#+BEGIN_SRC emacs-lisp
(defun restart-emacs ()
  (interactive)
   (load-file "~/.emacs.d/init.el"))
(bind-key "s-<f5>" 'restart-emacs)

#+END_SRC
  
* ELPA packages

  These are the packages that are not built into Emacs.

** Ace Jump Mode

 A quick way to jump around text in buffers.

 [[http://emacsrocks.com/e10.html][See Emacs Rocks Episode 10 for a screencast.]]
 #+begin_src emacs-lisp
 (use-package ace-jump-mode
   :ensure t
   :diminish ace-jump-mode
   :commands ace-jump-mode
   :bind ("C-S-s" . ace-jump-mode))
 #+end_src

** Ace Window

 [[https://github.com/abo-abo/ace-window][ace-window]] is a package that uses the same idea from ace-jump-mode for
 buffer navigation, but applies it to windows. The default keys are
 1-9, but it's faster to access the keys on the home row, so that's
 what I have them set to (with respect to Dvorak, of course).

 #+begin_src emacs-lisp
 (use-package ace-window
   :ensure t
   :config
   (setq aw-keys '(?a ?s ?d ?f ?j ?k ?k ?l))
   (ace-window-display-mode)
   :bind ("s-o" . ace-window))
 #+end_src

** C-Eldoc
    :PROPERTIES:
    :GitHub:   https://github.com/mooz/c-eldoc
    :END:

 This package displays function signatures in the mode line.

 #+begin_src emacs-lisp
 (use-package c-eldoc
   :commands c-turn-on-eldoc-mode
   :ensure t
   :init (add-hook 'c-mode-hook #'c-turn-on-eldoc-mode))
 #+end_src

** Helm
   Mother of changes. Need to learn to configure it better :D
 #+begin_src emacs-lisp
(use-package helm
  :ensure t
  :diminish helm-mode
  :init (progn
          (require 'helm-config)
          (use-package helm-projectile
            :ensure t
            :commands helm-projectile
            :bind ("C-c p h" . helm-projectile))
          (use-package helm-ag :ensure t)
          (setq helm-locate-command "mdfind -interpret -name %s %s"
                helm-ff-newfile-prompt-p nil
                helm-M-x-fuzzy-match t)
          (helm-mode))
  :bind (("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-`" . helm-resume)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files))) 
 #+end_src

** Magit
 I <3 magit.
 A great interface for git projects. It's much more pleasant to use
 than the git interface on the command line. Use an easy keybinding to
 access magit.

 #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c m" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
 #+end_src

*** Fullscreen magit

 #+BEGIN_QUOTE
 The following code makes magit-status run alone in the frame, and then
 restores the old window configuration when you quit out of magit.

 No more juggling windows after commiting. It's magit bliss.
 #+END_QUOTE
 [[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

 #+begin_src emacs-lisp
 ;;full screen magit-status
 (defadvice magit-status (around magit-fullscreen activate)
   (window-configuration-to-register :magit-fullscreen)
   ad-do-it
   (delete-other-windows))

 (defun magit-quit-session ()
   "Restores the previous window configuration and kills the magit buffer"
   (interactive)
   (kill-buffer)
   (jump-to-register :magit-fullscreen))
 #+end_src

** Edit With Emacs

 Editing input boxes from Chrome with Emacs. Pretty useful to keep all
 significant text-writing on the web within emacs. I typically use this
 with posts on Discourse, which has a post editor that overrides normal
 Emacs key bindings with other functions. As such, ~markdown-mode~ is
 used.

 #+begin_src emacs-lisp
;; (use-package edit-server
;;   :ensure t
;;   :config
;;   (edit-server-start)
;;   (setq edit-server-default-major-mode 'markdown-mode)
;;   (setq edit-server-new-frame nil))
 #+end_src

** Gists

 #+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :commands gist-list)
 #+END_SRC

;; ** Macrostep

;; Macrostep allows you to see what Elisp macros expand to. Learned about
;; it from the [[https://www.youtube.com/watch?v%3D2TSKxxYEbII][package highlight talk for use-package]].

;; #+begin_src emacs-lisp
;; (use-package macrostep
;;   :ensure t
;;   :bind ("H-`" . macrostep-expand))
;; #+end_src

;; ** Markdown mode

;; #+begin_src emacs-lisp
;; (use-package markdown-mode
;;   :ensure t
;;   :mode (("\\.markdown\\'" . markdown-mode)
;;          ("\\.md\\'"       . markdown-mode)))
;; #+end_src

;; ** Multiple cursors

;; We'll also need to ~(require 'multiple-cusors)~ because of [[https://github.com/magnars/multiple-cursors.el/issues/105][an autoload issue]].

;; #+begin_src emacs-lisp
;; (use-package multiple-cursors
;;   :ensure t
;;   :init (require 'multiple-cursors)
;;   :bind (("C-S-c C-S-c" . mc/edit-lines)
;;          ("C->"         . mc/mark-next-like-this)
;;          ("C-<"         . mc/mark-previous-like-this)
;;          ("C-c C-<"     . mc/mark-all-like-this)
;;          ("C-!"         . mc/mark-next-symbol-like-this)
;;          ("s-d"         . mc/mark-all-dwim)))
;; #+end_src

;; ** Olivetti

;; #+begin_src emacs-lisp
;; (use-package olivetti
;;   :ensure t
;;   :bind ("s-<f6>" . olivetti-mode))
;; #+end_src

;; ** Perspective

;; Workspaces in Emacs.

;; #+begin_src emacs-lisp :tangle no
;; (use-package perspective
;;   :ensure t
;;   :config (persp-mode))
;; #+end_src

** [[https://github.com/skeeto/elfeed][Elfeed]]
   
#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :bind ("C-c x" . magit-status)
  :config (setq elfeed-feeds
                '("https://news.ycombinator.com/rss"
                  "http://www.howardism.org/index.xml")))
#+end_src

** Yaml mode
  Ansible plays are written in yaml :D
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC

** Projectile

 #+BEGIN_QUOTE
 Project navigation and management library for Emacs.
 #+END_QUOTE
 http://batsov.com/projectile/


#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    (use-package ag
      :commands ag
      :ensure t)))
#+end_src

** Yasnippet

 Yeah, snippets! I start with snippets from [[https://github.com/AndreaCrotti/yasnippet-snippets][Andrea Crotti's collection]]
 and have also modified them and added my own.

 It takes a few seconds to load and I don't need them immediately when
 Emacs starts up, so we can defer loading yasnippet until there's some
 idle time.

 #+begin_src emacs-lisp
(use-package yasnippet
 :ensure t
 :diminish yas-minor-mode
 :config
 (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
 (yas-global-mode))
 #+end_src

** Which Key mode
   Emacs package that displays available keybindings in popup 
   #+BEGIN_SRC emacs-lisp
(use-package which-key
 :ensure t
 :init
 :config
  (setq which-key-popup-type 'side-window)
  (which-key-mode))
   #+END_SRC

** Smartparens mode

 #+begin_src emacs-lisp
(use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config (progn (require 'smartparens-config)
                 (smartparens-global-mode t)))
 #+end_src

*** Smartparens org mode

 Set up some pairings for org mode markup. These pairings won't
 activate by default; they'll only apply for wrapping regions.

 #+begin_src emacs-lisp
(sp-local-pair 'org-mode "~" "~" :actions '(wrap))
(sp-local-pair 'org-mode "/" "/" :actions '(wrap))
(sp-local-pair 'org-mode "*" "*" :actions '(wrap))
 #+end_src
** COMMENT Smartscan

 #+BEGIN_QUOTE
 Quickly jumps between other symbols found at point in Emacs.
 #+END_QUOTE
 http://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer


 #+begin_src emacs-lisp
 (use-package smartscan
   :ensure t
   :config (global-smartscan-mode 1)
   :bind (("s-n" . smartscan-symbol-go-forward)
          ("s-p" . smartscan-symbol-go-backward)))
 #+end_src

;; ** Smex

;; Smex integrates ido with ~M-x~. I used to use this before moving on to
;; [[*Helm][helm]].

;; #+begin_src emacs-lisp
;; (use-package smex
;;   :if (not (featurep 'helm-mode))
;;   :ensure t
;;   :bind ("M-x" . smex))
;; #+end_src

** Skewer mode

 Live coding for HTML/CSS/JavaScript.

 #+begin_src emacs-lisp
 (use-package skewer-mode
  :commands skewer-mode
   :ensure t
   :config (skewer-setup))
 #+end_src

** Smoothscrolling

 This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
 around so much.

 #+begin_src emacs-lisp
 (use-package smooth-scrolling
   :ensure t)
 #+end_src

** Scratch

 Convenient package to create =*scratch*= buffers that are based on the
 current buffer's major mode. This is more convienent than manually
 creating a buffer to do some scratch work or reusing the initial
 =*scratch*= buffer.

 #+begin_src emacs-lisp
 (use-package scratch
   :ensure t)
 #+end_src

** Zoom-frm

 =zoom-frm= is a nice package that allows you to resize the text of
 entire Emacs frames (this includes text in the buffer, mode line, and
 minibuffer). The =zoom-in/out= command acts similar to the
 =text-scale-adjust= command---you can chain zooming in, out, or
 resetting to the default size once the command has been initially
 called.

 Changing the =frame-zoom-font-difference= essentially enables a
 "presentation mode" when calling =toggle-zoom-frame=.

 #+begin_src emacs-lisp
 (use-package zoom-frm
   :ensure t
   :bind (("C-M-=" . zoom-in/out)
          ("H-z"   . toggle-zoom-frame))
   :config
   (setq frame-zoom-font-difference 10))
 #+end_src
** Undo Tree
   Previously when I had tried [[https://github.com/syl20bnr/spacemacs][spacemacs]] I became fan of this one.
#+BEGIN_SRC emacs-lisp
 (use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))
#+END_SRC


** Nerd Tree like vim
   Hard to navigate tree, lets steal goodness from vim
#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  ;;:bind ("s-<f9>" . 'neotree-toggle)
  )
#+END_SRC


** Markdown Mode
   Big fan of org-mode, but people also love README.md, #worthtrying
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :config
  (autoload 'markdown-mode "markdown-mode"
    "Major mode for editing Markdown files" t)
  (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

  )
#+END_SRC

** Docker 
   dhayu-dhayoou... dakari sake ta :p
*** Docker File Mode
    Cheese, they have it updated, better write an abreast_of function
 #+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :config
  (require 'dockerfile-mode)
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
  )
 #+END_SRC

** Coffee mode
   coffee, hubot cha ni, tyo coffee ma cha ke tesko code

 #+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :ensure t
  :config
  ;; automatically clean up bad whitespace
  (setq whitespace-action '(auto-cleanup))
  ;; only show bad whitespace
  (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab))
  ;; This gives you a tab of 2 spaces
  (custom-set-variables '(coffee-tab-width 2))
  )
 #+END_SRC

 
   
** COMMENT Emacs IPython Notebook
 #+begin_src emacs-lisp
 (use-package ein
   :ensure t)
 #+end_src

** COMMENT Expand region

#+begin_src emacs-lisp
 (use-package expand-region
   :ensure t
   :bind ("C-@" . er/expand-region))
#+end_src

** COMMENT Floobits
 Using [[https://floobits.com/][Floobits]] for code collaboration.

 #+begin_src emacs-lisp :tangle no
 (use-package floobits
   :ensure t)
 #+end_src

** COMMENT Flycheck
 Still need to set up hooks so that flycheck automatically runs in
 python mode, etc. js2-mode is already really good for the syntax
 checks, so I probably don't need the jshint checks with flycheck for
 it.

 #+begin_src emacs-lisp
 (use-package flycheck
   :ensure t
   :config (setq flycheck-html-tidy-executable "tidy5"))
 #+end_src

*** COMMENT Linter setups

 Install the HTML5/CSS/JavaScript linters.
 #+begin_src sh
 brew tap homebrew/dupes
 brew install tidy
 npm install -g jshint
 npm install -g csslint
 #+end_src
** COMMENT Python
 Integrates with IPython.

 #+begin_src emacs-lisp :tangle no
 (use-package python-mode
   :ensure t)
 #+end_src

** COMMENT Restclient

 See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
 testing APIs from within Emacs. The HTTP calls you make in the buffer
 aren't constrainted within Emacs; there's the
 =restclient-copy-curl-command= to get the equivalent =curl= call
 string to keep things portable.

 #+begin_src emacs-lisp
 (use-package restclient
   :ensure t
   :mode ("\\.restclient\\'" . restclient-mode))
 #+end_src

** COMMENT Visual-regexp

 #+begin_src emacs-lisp
 (use-package visual-regexp
   :ensure t
   :init
   (use-package visual-regexp-steroids :ensure t)
   :bind (("C-c r" . vr/replace)
          ("C-c q" . vr/query-replace)
          ("C-c m" . vr/mc-mark) ; Need multiple cursors
          ("C-M-r" . vr/isearch-backward)
          ("C-M-s" . vr/isearch-forward)))
 #+end_src

** COMMENT Webmode

 #+begin_src emacs-lisp :tangle no
 (use-package web-mode
   :ensure t)
 #+end_src

** COMMENT Emmet

 According to [[http://emmet.io/][their website]], "Emmet — the essential toolkit for web-developers."

 #+begin_src emacs-lisp
 (use-package emmet-mode
   :ensure t
   :commands emmet-mode
   :config
   (add-hook 'html-mode-hook 'emmet-mode)
   (add-hook 'css-mode-hook 'emmet-mode))
 #+end_src

* COMMENT Computer-specific settings
  Load some computer-specific settings, such as the name and and email address. The way the settings are loaded is based off of [[https://github.com/magnars/.emacs.d][Magnar Sveen's] config.

 In my case, the computers I use usually use the same username (my
 name, go figure), so instead of basing the specific settings from the
 username, I use the hostname. The shell command ~hostname -s~ gets the
 hostname for the computer without any "domain information," such as
 the ".local" suffix.

 I use the ~s-trim~ function, which comes from the [[https://github.com/magnars/s.el][s string library]]. I
 ~require~ it here, though a handful of the ELPA packages that are
 loaded earlier in the config depend on it already. That means the
 ~require~ is redundant, but better to be explicit about it.

 #+begin_src emacs-lisp
(defvar mai/user-settings-dir nil
  "The directory with user-specific Emacs settings for this
  user.")

;; Settings for currently logged in user
(require 's)
(setq mai/user-settings-dir
      (concat user-emacs-directory
              "users/"
              (s-trim (shell-command-to-string "hostname -s"))))
(add-to-list 'load-path mai/user-settings-dir)

;; Load settings specific for the current user
(when (file-exists-p mai/user-settings-dir)
  (mapc 'load (directory-files mai/user-settings-dir nil "^[^#].*el$")))
 #+end_src

* COMMENT Languages
** C/Java

 I don't like the default way that Emacs handles indentation. For instance,
 #+begin_src C
 int main(int argc, char *argv[])
 {
   /* What's with the brace alignment? */
   if (check)
     {
     }
   return 0;
 }
 #+end_src
 #+begin_src java
 switch (number)
     {
     case 1:
         doStuff();
         break;
     case 2:
         doStuff();
         break;
     default:
         break;
     }
 #+end_src

 Luckily, I can modify the way Emacs formats code with this configuration.
 #+begin_src emacs-lisp
 (defun my-c-mode-hook ()
   (setq c-basic-offset 4)
   (c-set-offset 'substatement-open 0)   ; Curly braces alignment
   (c-set-offset 'case-label 4))         ; Switch case statements alignment

 (add-hook 'c-mode-hook 'my-c-mode-hook)
 (add-hook 'java-mode-hook 'my-c-mode-hook)
 #+end_src

* Misc
** Display Time

 When displaying the time with =display-time-mode=, I don't care about
 the load average.

 #+begin_src emacs-lisp
(setq display-time-default-load-average nil)
(display-time-mode t)
 #+end_src

** Display Battery Mode

 See the documentation for =battery-mode-line-format= for the format
 characters.

 #+begin_src emacs-lisp
 (setq battery-mode-line-format " %b%p%% ")
 (display-battery-mode t)
 #+end_src

** Better scrolling

 #+begin_src emacs-lisp
 (setq mouse-wheel-scroll-amount (quote (0.01)))
 #+end_src

** COMMENT Docview keybindings

 #+begin_src emacs-lisp
 (use-package doc-view
   :config
   (define-key doc-view-mode-map (kbd "<right>") 'doc-view-next-page)
   (define-key doc-view-mode-map (kbd "<left>") 'doc-view-previous-page))
 #+end_src

** COMMENT Visible mode

 I found out about this mode my looking through simple.el. I use it to
 see raw org-mode files without going to a different mode like
 text-mode, which is what I had done in order to see invisible text
 (with org hyperlinks). The entire buffer contents will be visible
 while still being in org mode.

 #+begin_src emacs-lisp
 (use-package visible-mode
   :bind ("H-v" . visible-mode))
 #+end_src

** COMMENT Shalil mode
   These are goodies from shalil bro
   #+BEGIN_SRC emacs-lisp
   
   #+END_SRC

* Custom function
** Gitwatcher
   track changes and push file changes with git
   #+BEGIN_SRC emacs-lisp
(defvar autocomit-dir-set '()
  "Set of directories for which there is a pending timer job")

(defun autocommit-schedule-commit (dn)
  "Schedule an autocommit (and push) if one is not already scheduled for the given dir."
  (if (null (member dn autocommit-dir-set))
      (progn
        (run-with-idle-timer
         10 nil
         (lambda (dn)
           (setq autocommit-dir-set (remove dn autocommit-dir-set))
           (message (concat "Committing org files in " dn))
           (shell-command (concat "cd " dn " && git commit -m 'Updated org files.'"))
           (shell-command (concat "cd " dn " && git push & /usr/bin/true"))
           (run-hooks 'dustin-autocommit-hooks))
         dn)
        (setq autocommit-dir-set (cons dn autocommit-dir-set)))))

(defun autocommit-after-save-hook ()
  "After-save-hook to 'git add' the modified file and schedule a commit and push in the idle loop."
  (let ((fn (buffer-file-name)))
    (message "git adding %s" fn)
    (shell-command (concat "git add " fn))
    (autocommit-schedule-commit (file-name-directory fn))))

(defun autocommit-setup-save-hook ()
  "Set up the autocommit save hook for the current file."
  (interactive)
  (message "Set up autocommit save hook for this buffer.")
  (add-hook 'after-save-hook 'autocommit-after-save-hook nil t))

;;
;; Integration
;;

(defun dustin-visiting-a-file ()
  (let* ((fn (buffer-file-name))
         (dn (file-name-directory fn)))
    (if (equal dn (expand-file-name "~/org/"))
        (progn
          (message "Setting up local hook for %s (in %s)"
                   (file-name-nondirectory fn) dn)
          (autocommit-setup-save-hook)
          (add-hook 'dustin-autocommit-hooks 'org-mobile-push)))))

(add-hook 'find-file-hook 'dustin-visiting-a-file)

   #+END_SRC

   #+RESULTS:
   | dustin-visiting-a-file | #[0 \302\301!\210\303\304!8\211\207 [buffer-file-name auto-revert-tail-pos make-local-variable 7 file-attributes] 3] | git-commit-setup-check-buffer | projectile-global-mode-check-buffers | global-undo-tree-mode-check-buffers | undo-tree-load-history-hook | smartparens-global-mode-check-buffers | yas-global-mode-check-buffers | recentf-track-opened-file | global-visual-line-mode-check-buffers | global-font-lock-mode-check-buffers | epa-file-find-file-hook | vc-refresh-state |

