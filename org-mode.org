    #+end_src
    
** Usability

#+begin_src emacs-lisp
  ;; good stuffs: https://protesilaos.com/codelog/2025-01-16-emacs-org-todo-agenda-basics/
  (setq org-M-RET-may-split-line '((default . nil)))
  (setq org-insert-heading-respect-content t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
#+end_src

** Evil: org evil mode

#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src


* Org Roam to rescue
  Org roam to rescue

  fix issue with org-roam
  #+begin_quote
  byte-code: Cannot open load file: No such file or directory, emacsql-sqlite-common
  #+end_quote


  #+begin_src emacs-lisp
    (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory (file-truename "~/repos/thapakazi/orgr"))
      (org-roam-completion-everywhere t)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             :map org-mode-map
             ("C-M-i" . completion-at-point)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      ("C-c n d" . org-roam-dailies-map)
      :config
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol)
      (org-roam-setup)
      (setq org-roam-dailies-directory "daily/")

      (setq org-roam-dailies-capture-templates
            '(("d" "default" entry
               "* %?"
               :target (file+head "%<%Y-%m-%d>.org"
                                  "#+title: dailies:%<%Y-%m-%d>\n"))))
    )
  #+end_src

  #+RESULTS:
  : org-roam-dailies-map

* Agenda & Capture 
#+begin_src emacs-lisp
  ;; Org-mode setup for life planning
  (require 'org)
  (require 'org-agenda)
  (require 'org-capture)

  ;; Set your org directory (FIXED PATH)
  (setq org-directory "~/org/agendas/")
  (setq org-default-notes-file (concat org-directory "inbox.org"))

  ;; Org agenda files
  (setq org-agenda-files '("~/org/agendas/inbox.org"
                           "~/org/agendas/daily.org"
                           ;;"~/org/agendas/weekly.org" 
                           ;;"~/org/agendas/monthly.org"
                           ;;"~/org/agendas/yearly.org"
                           "~/org/agendas/routine.org"
                           ;;"~/org/agendas/challenges.org")
                           ))

  ;; If you only want to see the agenda for today
  ;; (setq org-agenda-span 'day)
  ;; Only show one day of the agenda at a time
  (setq org-agenda-span 1
      org-agenda-start-day "+0d")

  ;; Custom agenda views
  (setq org-agenda-custom-commands
        '(("d" "Daily Dashboard"
           ((agenda "" ((org-agenda-span 1)
                        (org-agenda-start-on-weekday nil)
                        (org-agenda-start-day "today")))
            (tags-todo "priority" ((org-agenda-overriding-header "Priority Tasks")))
            (tags-todo "admin" ((org-agenda-overriding-header "Administrative")))
            (tags-todo "health" ((org-agenda-overriding-header "Health & Routine")))
            (tags-todo "family" ((org-agenda-overriding-header "Family & Social")))))
          
          ("w" "Weekly Review"
           ((todo "TODO|PROGRESS" ((org-agenda-files '("~/org/agendas/weekly.org"))
                                   (org-agenda-overriding-header "This Week's Goals")))
            (agenda "" ((org-agenda-span 7)
                        (org-agenda-start-on-weekday 1)))))
          ("i" "Inbox Review"
            ((tags-todo ""))
           )
          
          ("M" "Monthly Overview"
           ((todo "TODO|PROGRESS" ((org-agenda-files '("~/org/agendas/monthly.org"))
                                   (org-agenda-overriding-header "Monthly Goals")))))))

  ;; Simple function to create daily template
  (defun org-create-daily-template ()
    "Create today's daily template with tags"
    (interactive)
    (let ((today (format-time-string "%Y-%m-%d"))
          (today-full (format-time-string "%Y-%m-%d %a")))
      (find-file "~/org/agendas/daily.org")
      (goto-char (point-min))
      (insert (format "* Today - [%s]\n\n" today))
      (insert (format "** TODO Complete security training module    :priority:\n   SCHEDULED: <%s 09:00>\n" today-full))
      (insert (format "** TODO Work on main project               :priority:\n   SCHEDULED: <%s 14:00>\n" today-full))
      (insert (format "** TODO Learning task                      :priority:learning:\n   SCHEDULED: <%s 16:00>\n\n" today-full))
      
      (insert (format "** TODO Check emails and messages          :admin:\n   SCHEDULED: <%s 08:00>\n" today-full))
      (insert (format "** TODO Plan next day                      :admin:\n   SCHEDULED: <%s 21:00>\n\n" today-full))
      
      (insert (format "** TODO Review health goals                :health:\n   SCHEDULED: <%s 18:00>\n" today-full))
      (insert (format "** TODO Track daily progress               :health:\n   SCHEDULED: <%s 21:30>\n\n" today-full))
      
      (insert (format "** TODO Family connection                  :family:\n   SCHEDULED: <%s 17:00>\n" today-full))
      (insert (format "** TODO Pet care (Budi)                   :family:\n   SCHEDULED: <%s 15:00>\n\n" today-full))
      
      (save-buffer)
      (message "Daily template created for %s" today)))

  ;; Capture templates (SIMPLIFIED)
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org/agendas/inbox.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          
          ("p" "Priority Task" entry (file+headline "~/org/agendas/daily.org" "Tasks")
           "* TODO %?    :priority:\n  SCHEDULED: %^t")
          
          ("a" "Admin Task" entry (file+headline "~/org/agendas/daily.org" "Tasks") 
           "* TODO %?    :admin:\n  SCHEDULED: %^t")
          
          ("h" "Health Task" entry (file+headline "~/org/agendas/daily.org" "Tasks")
           "* TODO %?    :health:\n  SCHEDULED: %^t")
          
          ("f" "Family Task" entry (file+headline "~/org/agendas/daily.org" "Tasks")
           "* TODO %?    :family:\n  SCHEDULED: %^t")

          ("r" "Routine Task" entry (file+headline "~/org/agendas/routine.org" "Daily Routine Tasks")
           "* TODO %?    :routine:\n  SCHEDULED: %^t")
          
          ("w" "Weekly Goal" entry (file+headline "~/org/agendas/weekly.org" "Weekly Goals")
           "* TODO %?\n  DEADLINE: <%(org-read-date nil nil \"+7d\")>")
          
          ("m" "Monthly Goal" entry (file+headline "~/org/agendas/monthly.org" "Monthly Goals")  
           "* TODO %?\n  DEADLINE: <%(org-read-date nil nil \"+1m\")>")
          
          ("c" "Challenge" entry (file+headline "~/org/agendas/challenges.org" "Active Challenges")
           "* CHALLENGE %?\n  DEADLINE: %^t\n  :PROPERTIES:\n  :TYPE: %^{Type|daily|weekly|monthly|yearly}\n  :END:")
          
          ("R" "Review" entry (file+datetree "~/org/agendas/reviews.org")
           "* %^{Review Type|Daily|Weekly|Monthly|Yearly} Review %U\n** What went well:\n%?\n** What needs improvement:\n\n** Plans for next period:\n\n")))

  ;; Custom TODO keywords
  (setq org-todo-keywords
        '((sequence "TODO(t)" "PROGRESS(p!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c!)")
          (sequence "CHALLENGE(e)" "ðŸ’¯(h!)" "|" "COMPLETED(C!)" "FAILED(f!)")))

  ;; Tags for easy categorization
  (setq org-tag-alist '(("priority" . ?p)
                        ("admin" . ?a) 
                        ("health" . ?h)
                        ("family" . ?f)
                        ("work" . ?w)
                        ("learning" . ?l)
                        ("routine" . ?r)
                        ("meal" . ?m)
                        ("fun" . ?n)))

  ;; Habit tracking
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  ;; Key bindings
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c d") 'org-create-daily-template)
#+end_src

#+RESULTS:
: org-create-daily-template

***  COMMENT org agenda better ui 
  #+begin_src emacs-lisp
    ;; Function to be run when org-agenda is opened
    (defun org-agenda-open-hook ()
      "Hook to be run when org-agenda is opened"
      (olivetti-mode))

    (use-package olivetti  
      :ensure t
      :config
      ;; Adds hook to org agenda mode, making follow mode active in org agenda
      (add-hook 'org-agenda-mode-hook 'org-agenda-open-hook)
      (setq olivetti-set-width 90)
      )
  #+end_src

  #+RESULTS:
  : [nil 26826 63066 94989 nil elpaca-process-queues nil nil 0 nil]


** Org babel languages

  #+begin_src emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (C . t)
       (calc . t)
       (latex . t)
       (java . t)
       (ruby . t)
       (scheme . t)
       (shell . t)
       (sqlite . t)
       (go . t)
       (js . t)))
  #+end_src
