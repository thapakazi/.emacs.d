#+TITLE: Basic modes/configs rest here
#+DATE: Friday, Feb 26 2016
#+DESCRIPTION: default shared basic modes/configs goes here

* Magit
 I <3 magit.
 A great interface for git projects. It's much more pleasant to use
 than the git interface on the command line. Use an easy keybinding to
 access magit.

 #+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-c m" . magit-status)
  :config
  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
 #+end_src

 #+RESULTS:

*** Fullscreen magit

 #+BEGIN_QUOTE
 The following code makes magit-status run alone in the frame, and then
 restores the old window configuration when you quit out of magit.

 No more juggling windows after commiting. It's magit bliss.
 #+END_QUOTE
 [[http://whattheemacsd.com/setup-magit.el-01.html][Source: Magnar Sveen]]

 #+begin_src emacs-lisp
 ;;full screen magit-status
 (defadvice magit-status (around magit-fullscreen activate)
   (window-configuration-to-register :magit-fullscreen)
   ad-do-it
   (delete-other-windows))

 (defun magit-quit-session ()
   "Restores the previous window configuration and kills the magit buffer"
   (interactive)
   (kill-buffer)
   (jump-to-register :magit-fullscreen))
 #+end_src

* [[https://www.emacswiki.org/emacs/AutoComplete][AutoComplete]]
  Auto complete whem you type with nice popup menu :D
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))

#+END_SRC

#+RESULTS:
: t

* [[http://batsov.com/projectile/][Projectile]]
  Working with multiple projects, and typing everything yourself to
  switch really sucks.. ðŸ¤•

 #+BEGIN_QUOTE
 Project navigation and management library for Emacs.
 #+END_QUOTE

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :bind
  ("C-c p p" . projectile-switch-project)
  ("C-c p f" . projectile-find-file)
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    (use-package ag
      :commands ag
      :ensure t)))
#+end_src

  My personal favourites:
#+BEGIN_EXAMPLE
projectile-switch-project ; C-c p p
projectile-find-file; C-c p f
#+END_EXAMPLE

* [[https://github.com/abo-abo/swiper][Swiper]] [[https://www.youtube.com/watch?v=VvnJQpTFVDc][youtube]]
  ~isearch~ && ~ido-mode~ made better, fast and interactive with
  ~ivy-mode~

  #+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    )
  )

  #+END_SRC

  #+RESULTS:
  : t

* Winner Mode
  #+BEGIN_SRC emacs-lisp
  (winner-mode 1)
  #+END_SRC
* Highlight Symbol 
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :config 
    (global-set-key [(control f3)] 'highlight-symbol-at-point)
    (global-set-key [(shift f3)] 'highlight-symbol-next)
    (global-set-key [(shift f2)] 'highlight-symbol-prev)
  
    (global-unset-key (kbd "<C-S-mouse-1>"))
    (global-set-key (kbd "<C-S-mouse-1>")
                    (lambda (event)
                      (interactive "e")
                      (save-excursion
                        (goto-char (posn-point (event-start event)))
                        (highlight-symbol-at-point))))
)
    ;; :init 
    ;; (defun highlight-with-mouse ()
    ;;   (lambda (event)
    ;;     (interactive "e")
    ;;     (save-excursion
    ;;       (goto-char (posn-point (event-start event)))
    ;;       (highlight-symbol-at-point))))
    ;; :bind ("<C-mouse-1>" . highlight-with-mouse))
#+END_SRC
* Recentf
 quick navigate to recent files

 #+begin_src emacs-lisp
(use-package recentf
  :commands ido-recentf-open
  :init
  (progn
    (recentf-mode t)
    (setq recentf-max-saved-items 200)

    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
          (message "Opening file...")
        (message "Aborting"))))
  :config
    (bind-key "C-x ," 'ido-recentf-open))
 #+end_src

 #+RESULTS:
 : t
