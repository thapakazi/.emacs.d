#+TITLE: Basic modes/configs rest here
#+DATE: Friday, Feb 26 2016
#+DESCRIPTION: default shared basic modes/configs goes here

* Default Scratch Pad
  #+begin_src emacs-lisp
  ;;(setq initial-major-mode 'js-mode)
  #+end_src

* [[https://www.emacswiki.org/emacs/AutoComplete][AutoComplete]]
  Auto complete whem you type with nice popup menu :D
  #+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))

  #+END_SRC

  #+RESULTS:
  : t

* COMMENT fasd
  #+BEGIN_SRC emacs-lisp
;;;; fasd
;; find previous files/dirs quickly (uses `fasd' shell script)
(use-package fasd
  :bind ("C-h C-f" . fasd-find-file)
  :config
  (setq fasd-completing-read-function 'helm--completing-read-default)
  (global-fasd-mode 1))
  #+END_SRC

        
* [[http://batsov.com/projectile/][Projectile]]
  Working with multiple projects, and typing everything yourself to
  switch really sucks.. ü§ï

  #+BEGIN_QUOTE
  Project navigation and management library for Emacs.
  #+END_QUOTE

  #+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :commands projectile-mode
  :config
  (progn
    (projectile-global-mode t)
    (setq projectile-enable-caching t)
    (use-package ag
      :commands ag
      :ensure t)))
  #+end_src

  My personal favorites:
  #+BEGIN_EXAMPLE
  projectile-switch-project ; C-c p p
  projectile-find-file; C-c p f
  #+END_EXAMPLE

* Multiple cursors
  yes, everyones fan of this video: [[http://emacsrocks.com/e13.html][on youtube]]

  #+BEGIN_SRC emacs-lisp
    (use-package multiple-cursors
      :ensure t
      :bind  (
	     ("C-S-c C-S-c" . mc/edit-lines)
	     ("C->" . mc/mark-next-like-this)
	     ("C-S-<mouse-5>" . mc/mark-next-like-this)
	     ("C-<" . mc/mark-previous-like-this)
	     ("C-S-<mouse-4>" . mc/mark-next-like-this)
	     ("C-c C-<" . mc/mark-all-like-this)
	     ("s-<mouse-1>" . mc/add-cursor-on-click)))
  #+END_SRC

  #+RESULTS:
  : mc/add-cursor-on-click


* [[https://github.com/abo-abo/hydra][Hydra]] [[https://www.youtube.com/watch?v=_qZliI1BKzI][youtube]]
  Tie up rellated commands into a family of short bindings wtih a
  common prefix; from [[https://github.com/abo-abo/hydra/blob/master/README.md][Readme.md]] ü§ñ
  
  #+BEGIN_SRC emacs-lisp
  (use-package hydra
  :ensure t
  :config
  (hydra-add-font-lock))
  #+END_SRC

  Some hydra in action. üòè
  #+BEGIN_SRC emacs-lisp
(require 'windmove)

(defun hydra-move-splitter-left (arg)
  "Move window splitter left."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (shrink-window-horizontally arg)
    (enlarge-window-horizontally arg)))

(defun hydra-move-splitter-right (arg)
  "Move window splitter right."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
      (enlarge-window-horizontally arg)
    (shrink-window-horizontally arg)))

(defun hydra-move-splitter-up (arg)
  "Move window splitter up."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (enlarge-window arg)
    (shrink-window arg)))

(defun hydra-move-splitter-down (arg)
  "Move window splitter down."
  (interactive "p")
  (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
      (shrink-window arg)
    (enlarge-window arg)))

(defhydra hydra-splitter (global-map "<f9>")
  "splitter"
  ("<left>" hydra-move-splitter-left)
  ("<down>" hydra-move-splitter-down)
  ("<up>" hydra-move-splitter-up)
  ("<right>" hydra-move-splitter-right))
  #+END_SRC

  Yet another useful stuff
  #+BEGIN_SRC emacs-lisp
(defhydra hydra-zoom (global-map "<f5>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))
  #+END_SRC
* [[https://github.com/abo-abo/swiper][Swiper]] [[https://www.youtube.com/watch?v=VvnJQpTFVDc][youtube]]
  ~isearch~ && ~ido-mode~ made better, fast and interactive with
  ~ivy-mode~

  #+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :bind
  (:map ivy-mode-map
   ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)
  ;; add ‚Äòrecentf-mode‚Äô and bookmarks to ‚Äòivy-switch-buffer‚Äô.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))
(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    )
  )

  #+END_SRC

  #+RESULTS:
  : t


* Counsel Mode
#+BEGIN_SRC emacs-lisp

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode 1)
  :bind 
  ("C-c p" . 'projectile-command-map)
  )
#+END_SRC
* Set default envs
  #+begin_src emacs-lisp
  (setenv "VISUAL" "emacsclient")
  (setenv "EDITOR" (getenv "VISUAL"))
  #+end_src

* Exec path from shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :vc (:url "https://github.com/purcell/exec-path-from-shell")
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  )
#+end_src
