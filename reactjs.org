#+TITLE: I am doing react, holla
#+DATE: Tuesday, Jul 30 2019
#+DESCRIPTION: learning react with fun

* Rjsx Mode
  
#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
  :ensure t
  :mode(("\\.js\\'" . rjsx-mode)
        ("\\.jsx\\'" . rjsx-mode))
  :init
  (add-hook 'rjsx-mode-hook 'prettier-js-mode)
  :config
  (setq js2-mode-show-parse-errors nil
        js2-mode-show-strict-warnings nil
        js2-basic-offset 2
        js-indent-level 2)
  )
#+END_SRC

* COMMENT Tide
  #+begin_src emacs-lisp
(use-package tide
  :ensure t
  :mode(("\\.ts\\'" . typescript-mode))
  :init
  (add-hook 'typescript-mode-hook 'tide-mode)
  (add-hook 'typescript-mode-hook 'prettier-js-mode)
  :config
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save-mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))
  #+end_src

* React Snippets
  #+begin_src emacs-lisp
(use-package react-snippets
  :ensure t
  :config
  (require 'react-snippets)
)
  #+end_src

* Node modules
  #+begin_src emacs-lisp
(use-package add-node-modules-path
  :defer t
  :hook (((js2-mode rjsx-mode) . add-node-modules-path)))
  #+end_src
* Prettier
  #+begin_src emacs-lisp
(use-package prettier-js
  :defer t
  :diminish prettier-js-mode
  :hook (((js2-mode rjsx-mode) . prettier-js-mode))
  ;; :init
  ;; (evil-leader/set-key-for-mode 'rjsx-mode
  ;;   "fp" 'prettier-js-mode)) ; (f)ormat (p)rettier
  )
  #+end_src

  #+RESULTS:
  | lsp | add-node-modules-path | prettier-js-mode |
